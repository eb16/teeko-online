{"version":3,"sources":["features/game/gameSlice.ts","features/game/Piece.tsx","features/game/Slot.tsx","features/game/Game.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Selection","initialState","board","PLAYER1","PLAYER2","NONE","Array","fill","activeCell","undefined","isValidMovement","from","to","Math","abs","x","y","slice","createSlice","name","reducers","movePiece","state","action","payload","console","log","setActiveCell","actions","selectBoard","game","selectActiveCell","Piece","cell","location","dispatch","useDispatch","useSelector","useDrag","item","type","toString","collect","monitor","isDragging","begin","drag","ref","style","padding","margin","border","background","borderRadius","cursor","opacity","outlineStyle","Slot","useDrop","accept","drop","canDrop","Game","map","col","App","className","DndProvider","backend","Backend","store","configureStore","reducer","gameReducer","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1fe6f9c8.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\n\r\nexport enum Selection {\r\n  NONE,\r\n  PLAYER1,\r\n  PLAYER2\r\n}\r\n\r\nexport interface Location {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface Movement {\r\n  to: Location;\r\n}\r\n\r\ninterface BoardState {\r\n  board: Selection[][];\r\n  playersTurn?: Selection;\r\n  activeCell?: Location;\r\n}\r\n\r\nconst initialState: BoardState = {\r\n  board: [\r\n    [\r\n      Selection.PLAYER1,\r\n      Selection.PLAYER2,\r\n      Selection.PLAYER1,\r\n      Selection.PLAYER2,\r\n      Selection.NONE\r\n    ],\r\n    Array(5).fill(Selection.NONE),\r\n    Array(5).fill(Selection.NONE),\r\n    Array(5).fill(Selection.NONE),\r\n    [\r\n      Selection.PLAYER2,\r\n      Selection.PLAYER1,\r\n      Selection.PLAYER2,\r\n      Selection.PLAYER1,\r\n      Selection.NONE\r\n    ]\r\n  ],\r\n  activeCell: undefined\r\n};\r\n\r\nexport const isValidMovement = (from: Location, to: Location) =>\r\n  Math.abs(from.x - to.x) <= 1 && Math.abs(from.y - to.y) <= 1;\r\n\r\nexport const slice = createSlice({\r\n  name: \"game\",\r\n  initialState,\r\n  reducers: {\r\n    movePiece: (state, action: PayloadAction<Movement>) => {\r\n      const { to } = action.payload;\r\n      const { activeCell } = state;\r\n      console.log(activeCell);\r\n      if (\r\n        activeCell &&\r\n        state.board[to.x][to.y] === Selection.NONE &&\r\n        isValidMovement(activeCell, to)\r\n      ) {\r\n        state.board[to.x][to.y] = state.board[activeCell.x][activeCell.y];\r\n        state.board[activeCell.x][activeCell.y] = Selection.NONE;\r\n        state.activeCell = undefined;\r\n      }\r\n    },\r\n    setActiveCell: (state, action: PayloadAction<Location>) => {\r\n      state.activeCell = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { movePiece, setActiveCell } = slice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectBoard = (state: RootState) => state.game.board;\r\nexport const selectActiveCell = (state: RootState) => state.game.activeCell;\r\n\r\nexport default slice.reducer;\r\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  movePiece,\n  selectActiveCell,\n  Selection,\n  Location,\n  isValidMovement,\n  setActiveCell\n} from \"./gameSlice\";\nimport { useDrag, useDrop } from \"react-dnd\";\n\ninterface Props {\n  cell: number;\n  location: Location;\n}\n\nexport function Piece({ cell, location }: Props) {\n  const dispatch = useDispatch();\n  const { x, y } = location;\n  const activeCell = useSelector(selectActiveCell);\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { payload: { x, y }, type: Selection.PLAYER1.toString() },\n    collect: monitor => ({ isDragging: !!monitor.isDragging() }),\n    begin: () => dispatch(setActiveCell({ x, y }))\n  });\n\n  return (\n    <button\n      ref={drag}\n      style={{\n        padding: 20,\n        margin: 5,\n        border: `1px solid ${\n          activeCell && activeCell.x === x && activeCell.y === y\n            ? \"blue\"\n            : \"black\"\n        }`,\n        background: cell === Selection.PLAYER1 ? \"black\" : \"red\",\n        borderRadius: \"50%\",\n        cursor: \"move\",\n        opacity: isDragging ? 0.5 : 1,\n        outlineStyle: \"none\"\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  movePiece,\n  selectActiveCell,\n  Selection,\n  Location,\n  isValidMovement\n} from \"./gameSlice\";\nimport { useDrag, useDrop } from \"react-dnd\";\n\ninterface Props {\n  cell: number;\n  location: Location;\n}\n\nexport function Slot({ cell, location }: Props) {\n  const dispatch = useDispatch();\n  const { x, y } = location;\n  const activeCell = useSelector(selectActiveCell);\n\n  const [{ canDrop }, drop] = useDrop({\n    accept: Selection.PLAYER1.toString(),\n    drop: () => dispatch(movePiece({ to: { x, y } })),\n    canDrop: () => !!activeCell && isValidMovement(activeCell!, { x, y }),\n    collect: monitor => ({\n      canDrop: !!monitor.canDrop()\n    })\n  });\n\n  return (\n    <button\n      ref={drop}\n      style={{\n        padding: 20,\n        margin: 5,\n        border: \"1px solid black\",\n        background: canDrop ? \"#f9ffab\" : \"white\",\n        borderRadius: \"50%\"\n      }}\n    />\n  );\n}\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard, Selection } from \"./gameSlice\";\r\nimport { Piece } from \"./Piece\";\r\nimport { Slot } from \"./Slot\";\r\n\r\nexport function Game() {\r\n  const board = useSelector(selectBoard);\r\n\r\n  return (\r\n    <div>\r\n      {board.map((col, x) => (\r\n        <div>\r\n          {col.map((cell, y) =>\r\n            cell === Selection.NONE ? (\r\n              <Slot cell={cell} location={{ x, y }} />\r\n            ) : (\r\n              <Piece cell={cell} location={{ x, y }} />\r\n            )\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport Backend from \"react-dnd-html5-backend\";\r\n\r\nimport \"./App.css\";\r\nimport { Game } from \"./features/game/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1 className=\"App-logo\">Teeko</h1>\r\n        <DndProvider backend={Backend}>\r\n          <Game />\r\n        </DndProvider>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport gameReducer from \"../features/game/gameSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameReducer\r\n  }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}